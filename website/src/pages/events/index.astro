---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { enUS } from "date-fns/locale";
import { getCollection } from "astro:content";
import EventPreview from "../../components/EventPreview.astro";

import type { Event } from "../../event";
import { local_date } from "../../event";

// Get all events
let events: Event[] = await getCollection("events");
events.sort((a, b) => {
  return local_date(b).valueOf() - local_date(a).valueOf();
});

// Organize events into years and months.
type Month = Event[];
type Year = Map<number, Month>;
type AllEvents = Map<number, Year>;
let ordered_events: AllEvents = new Map<number, Year>();
for (let event of events) {
  let date = local_date(event);
  let year = date.getUTCFullYear();
  let month = date.getUTCMonth();

  if (!ordered_events.has(year)) {
    ordered_events.set(year, new Map<number, Month>());
  }

  if (!ordered_events.get(year)!.has(month)) {
    ordered_events.get(year)!.set(month, []);
  }

  ordered_events.get(year)!.get(month)!.push(event);
}
---

<BaseLayout
  pageTitle="Events"
  description="All past and future runs and club events."
>
  {
    Array.from(ordered_events).map(([year, months]) => {
      return (
        <section class="section">
          <h2>{year}</h2>
          <ul>
            {Array.from(months).map(([month, events]) => {
              return (
                <li class="month">
                  <h3>{enUS.localize.month(month)}</h3>
                  <ul>
                    {events.map((event) => {
                      return (
                        <li>
                          <EventPreview event={event} />
                        </li>
                      );
                    })}
                  </ul>
                </li>
              );
            })}
          </ul>
        </section>
      );
    })
  }
</BaseLayout>

<style>
  h2 {
    padding-bottom: 1rem;
    font-weight: 700;
  }

  ul {
    list-style: none;
    padding: 0px;
    margin: 0px;
  }

  .month {
    container: month / inline-size;
    margin-bottom: 2rem;
    display: grid;
    grid-template-columns: 1rem 1fr 3fr;
    align-items: start;
    gap: 1rem;

    h3 {
      grid-column: 2/3;
      padding-bottom: 0rem;
    }

    ul {
      grid-column: 3/4;
      li + li {
        padding-top: 1rem;
      }

      @container month (width < 70ch) {
        grid-column: 2/4;
      }
    }

    @container month ( width < 50ch) {
      ul {
        grid-column: 1 / -1;
      }
      h3 {
        grid-column: 1 / -1;
      }
    }
  }
</style>
