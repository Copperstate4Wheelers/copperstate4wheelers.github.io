---
import { Image } from "astro:assets";
import { DateTime } from "luxon";
import logo from "@assets/site/copperstate_logo.png";

/**
 * Navbar philosophy: mobile first and progressively enhance on wider screens.
 * CSS variables used:
 * --navbar-background: background color
 * --navbar-text: the text color for links and text-like elements (menu etc..)
 */

function classForLink(name: string) {
  name = name.toLowerCase();

  let path = Astro.url.pathname.split("/");
  if (path.length >= 2 && name == path[1]) {
    return "active-nav";
  } else {
    return "inactive-nav";
  }
}
---

<header transition:animate="none">
  <div class="container">
    <h1 class="page-title">Copperstate4Wheelers</h1>
    <Image
      class="logo"
      src={logo}
      alt="Copperstate4Wheelers.com Logo"
      width="256"
    />

    <input type="checkbox" id="nav-toggle" class="nav-toggle" />
    <nav>
      <ul>
        <li><a href="/" class={classForLink("")}>Home</a></li>
        <li><a href="/about" class={classForLink("about")}>About</a></li>
        <li><a href="/members" class={classForLink("members")}>Members</a></li>
        <li>
          <a
            href={`/events/${DateTime.local({ zone: "America/Phoenix" }).year}`}
            class={classForLink("events")}>Events</a
          >
        </li>
      </ul>
    </nav>

    <label for="nav-toggle" class="nav-toggle-label">
      <span></span>
    </label>
  </div>
</header>

<style>
  header {
    --navbar-background: var(--primary-700);
    --navbar-text: var(--secondary);

    /* Logo size scales based on the viewport, clamping at a max size. */
    --logo-size: clamp(1.2rem, 3vw, 2rem);

    /* hamburger width controls the button + the padding around the logo */
    --hamburger-width: 2rem;

    position: relative;
    display: block;
    z-index: 999;

    color: var(--navbar-text);
    background-color: var(--navbar-background);

    /* normalize all links inside the navbar */
    a {
      color: var(--navbar-text);
      text-decoration: none;
    }

    /* remove the nav-toggle from the flow and hide it offscreen */
    .nav-toggle {
      position: fixed;
      top: -9999px !important;
      left: -9999px !important;
    }

    .container {
      display: flex;
      gap: 1rem;
      padding: 1.5rem;
      align-content: center;
      justify-content: space-between;
      height: 100%;
    }
  }

  .page-title {
    position: fixed;
    bottom: -9999px;
  }

  .logo {
    display: block;
    object-fit: cover;
    width: auto;
    height: max(5rem, min(15vh, 15vw));
  }

  /**
   * The nav-toggle-label is a <label> for an <input> checkbox that makes the
   * menu appear and disappear. This is the "checkbox hack" for css-only menus.
   **/
  .nav-toggle-label {
    --hamburger-thickness: 0.3em;

    width: auto; /* because flex makes this act like block */
    height: 100%; /* click anywhere in the header to activate */

    display: flex;
    align-items: center;
    cursor: pointer;
    border-radius: 0.2em;

    /* create the hamburger via span pseudo elements */
    span,
    span::before,
    span::after {
      display: block;
      background-color: var(--navbar-text);
      width: var(--hamburger-width);
      height: var(--hamburger-thickness);
      border-radius: calc(var(--hamburger-thickness) * 0.5);
    }

    span {
      /* place the span relative to it's normal flow */
      position: relative;

      /* before and after positioned via absolute offsets from the <span> */
      &::before {
        content: "";
        position: absolute;
        bottom: calc(var(--hamburger-thickness) * 1.5);
        transform: rotate(0deg);
        transition:
          transform ease-in-out 400ms,
          bottom ease-in-out 400ms;
      }

      &::after {
        content: "";
        position: absolute;
        top: calc(var(--hamburger-thickness) * 1.5);
        transform: rotate(0deg);
        transition:
          transform ease-in-out 400ms,
          top ease-in-out 400ms;
      }
    }
  }

  /* change the nav-toggle-label when the checkbox is checked */
  .nav-toggle:checked ~ .nav-toggle-label {
    span {
      background-color: var(--navbar-background);
    }

    span::before {
      transform: rotate(45deg);
      bottom: 0;
    }

    span::after {
      transform: rotate(-45deg);
      top: 0;
    }
  }

  /* highlight the label when the user has selected the checkbox for input */
  .nav-toggle:focus ~ .nav-toggle-label {
    border: 1px solid var(--accent);
  }

  /* style the nav list */
  nav {
    position: absolute;
    transform: scale(1, 0);
    transform-origin: top;
    transition: transform ease-in 400ms;
    background-color: var(--navbar-background);
    left: 0;
    right: 0;
    top: 100%; /* place the top of the nav at the bottom of the parent */
    text-align: right;

    .active-nav {
      color: var(--accent);
    }

    /* align the link list with the hamburger */
    ul {
      margin-right: calc(var(--hamburger-width) * 1);
      list-style: none;
      padding: 0;
    }

    li {
      margin-block: 0.75em;
    }

    a {
      opacity: 0%;
      transition: opacity ease-in-out 250ms;
    }
  }

  /* when the toggle is checked, make the menu appear */
  .nav-toggle:checked ~ nav {
    transform: scale(1, 1);

    a {
      opacity: 100%;
      transition: opacity 250ms ease-in-out 250ms;
    }
  }

  /* desktop style */
  @media screen and (width > 50em) {
    /* remove the toggles entirely */
    .nav-toggle-label,
    .nav-toggle {
      display: none;
    }

    /* make the header into a flex display */
    header .container {
      --logo-size: clamp(2rem, 5vw, 3rem);

      max-width: 100rem;
    }

    nav {
      /* remove all mobile-specific styling */
      all: unset;
      font-size: calc(var(--logo-size) * 0.6);
      place-self: center;

      ul {
        display: flex;
        gap: 1em;
        margin: 0;
      }

      li {
        padding: 0;
        margin: 0;
      }

      a {
        position: relative;
        opacity: 100%;
        font-weight: 600;

        &::before {
          content: "";
          position: absolute;
          bottom: calc(100% + 0.25rem);
          background-color: var(--accent);
          height: 0.25rem;
          border-radius: 0.25rem;
          width: 100%;
          transform: scale(0, 1);
          transition: transform ease-in-out 250ms;
        }

        &:hover,
        &:focus-visible {
          &::before {
            transform: scale(1);
          }
        }
      }
    }
  }
</style>
